# Prime.smbly
# This file is example code that determines if a number is prime
# It demonstrates the use of registers, directives and labels.
#
# Copyright (c) DrSmCraft 2022

DECLARE .notPrime, " is not Prime" # Message to be printed if the number is not prime
DECLARE .prime, " is Prime" # Message to be printed if the number is prime

SR $1, 10 # The number that will be checked for primeness is in register $1. Currently, the number 10 will be checked.
SR $2, 1 # Set the looping variable to 1

LBL :loop # The loop section
ADD $2, $2, 1 # Increment the looping variable
MOD $3, $1, $2 # Check to is if the number is divisible by the looping variable with the modulo operation
JEQ $3, 0, :notPrime # If the remainder is zero, then it divisible and not prime. Jump to the notPrime label

LT $4, $2, $1 # Check if the looping variable is less than the argument variable
JEQ $4, 1, :loop # If it is, continue to loop.
JUMP :prime # If it is not, then the number is prime and jump to the prime label



LBL :notPrime # The notPrime label
PRINT $1 # Print the number
PRINTLN .notPrime # Print the not prime message
HALT # End the program


LBL :prime # The prime label
PRINT $1 # Print the number
PRINTLN .prime # Print the prime message
HALT # End the program
